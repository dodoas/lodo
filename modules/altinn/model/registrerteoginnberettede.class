<?

#Usage
# new RegistrerteOgInnberettede(array('fromPeriod'=>'2004-01', 'toPeriod'=>'2004-12'))
#Ikke periode 13???);
#

class RegistrerteOgInnberettede
{
	var $_db;
    var $_report;
    var $_altinnMapping;
    var $_generalReport;
    var $_comanyInfo;
    
    var $AKSJESELSKAP=1;
    var $SELVSTENDIGNAERINGSDRIVENDE=2;
    
    var $COMPANY_TYPE=1;

    var $_accountList=array();
    var $_accountIDList=array();
    var $_accountNameList=array();
    var $_saldoList=array();
    var $_saldoList100_5=array();
    var $_saldoList100_6=array();
    

    var $_fromPeriod;
    var $_toPeriod;
    var $_thisYear;
    var $_lastYear;
    var $_enableLastYear;
    
    var $_LONN_ACCOUNT=5000;
    var $_FERIE_PENGER_ACCOUNT=5040;
    var $_BIL_GODTGJORELSE_ACCOUNT=7100;
    var $_TILLEGG_KOSTNADER_ACCOUNT=2940;

    ############################################################################
    function RegistrerteOgInnberettede($args)
    {
        global $_SETUP, $_date, $_lib;
        require_once $_SETUP['HOME_DIR']."/code/lodo/lib/altinnmapping.class";
        includelogic('report/general');
        includelogic('company/companyinfo');

        $this->_enableLastYear = $args['enableLastYear'] = 1;
        $this->_report         = $args['report'];
        $this->_db             = $args['db'];
	
		//Init the mapping list for this report
        $this->_altinnMapping  = new AltinnMapping($this->_report);
        
        //Get the inforamtion of the company
        $this->_comanyInfo     = new ComanyInfo(array());
       $args['company_type']=  $this->_comanyInfo->CustomerCompany->ShareValue
                               +$this->_comanyInfo->CustomerCompany->ShareNumber;
        
        if ($args['company_type']>0) {
        	$this->COMPANY_TYPE=$this->AKSJESELSKAP;
        }else $this->COMPANY_TYPE=$this->SELVSTENDIGNAERINGSDRIVENDE;
        
       
		//
        $this->_fromPeriod     = $args['fromPeriod'];
        //print("fromperiod:".$this->_fromPeriod. "<br>");
        $this->_toPeriod       = $args['toPeriod'];
        $this->_thisYear       = $_lib['date']->get_this_year($args['fromPeriod']);
        $this->_lastYear       = $this->_thisYear-1;
        
        //Generate the report
        //$this->_generalReport  = new GeneralReport(array($args));
        $this->kostnader($this->_fromPeriod, $this->_toPeriod);
        //$this->feriepenger($this->_fromPeriod, $this->_toPeriod);
        //$this->feriepenger($_lib['date']->get_this_period_last_year($this->_fromPeriod), $_lib['date']->get_this_period_last_year($this->_toPeriod));

        //$this->_altinnMapping->Selvangivelse2Mapping();
        $this->BuildCompanyInfo();
        //list($this->_sumLine, $this->_sumPart, $this->_sumGroup, $this->_sumTotal, $this->_total) = $this->_generalReport->GetReport($args);
        
        
        //Start the mapping process by assocating the values to the right
        //ORID
        $this->InsertMapping();
        
        
        //Start the special calculation for this report
        //$this->setAccount('2.10', $this->getAccount('D2.9')+$this->getAccount('F2.9'));
    }

    ############################################################################
    function BuildCompanyInfo()
    {
        $this->setAccount('VName',       $this->_comanyInfo->CustomerCompany->VName);
        $this->setAccount('VAddress',    $this->_comanyInfo->CustomerCompany->VAddress);
        $this->setAccount('VZipCode',    $this->_comanyInfo->CustomerCompany->VZipCode);
        $this->setAccount('VCity',       $this->_comanyInfo->CustomerCompany->VCity);
        //$this->setAccount('OrgNumber',   $this->_comanyInfo->CustomerCompany->OrgNumber);
        $this->setAccount('OrgNumber', str_replace(" ", "", $this->_comanyInfo->CustomerCompany->OrgNumber2));
        $this->setAccount('CompanyMunicipality', $this->_comanyInfo->CustomerCompany->CompanyMunicipality);
        $this->setAccount('CompanyMunicipalityName', $this->_comanyInfo->CustomerCompany->CompanyMunicipalityName);

        $this->setAccount('FVName',      $this->_comanyInfo->RegnskapCompany->VName);
        $this->setAccount('FVAddress',   $this->_comanyInfo->RegnskapCompany->VAddress);
        $this->setAccount('FVZipCode',   $this->_comanyInfo->RegnskapCompany->VZipCode);
        $this->setAccount('FVCity',      $this->_comanyInfo->RegnskapCompany->VCity);
        //$this->setAccount('FOrgNumber',   $this->_comanyInfo->RegnskapCompany->OrgNumber);
        $this->setAccount('FOrgNumber', str_replace(" ", "", $this->_comanyInfo->RegnskapCompany->OrgNumber2));
        
        //If this a hold share company then don't use the social security number'
        if ($this->COMPANY_TYPE!=$this->AKSJESELSKAP)
            $this->setAccount('SocialSecurityID',   str_replace(".", "", str_replace("-", "", str_replace(" ", "", $this->_comanyInfo->CustomerPerson->SocialSecurityID))));
        

    }
    

    ##############################################################
    function InsertMapping()
    { 
    	$this->setAccount('100.2', $this->_accountIDList);
    	$this->setAccount('100.3', $this->_accountNameList);
    	$this->setAccount('100.4', $this->_saldoList);
    	$this->setAccount('100.5', $this->_saldoList100_5);
    	$this->setAccount('100.6', $this->_saldoList100_6);
       
    }//insertMapping
    
    ############################################################################
    function kostnader($fromPeriod, $toPeriod)
    {
        global $_sess, $_dbh, $_dsn, $_date, $_lib;
        
        $queryStr = " SELECT
          A.AccountName,
          A.AccountPlanID,
          A.Report{$this->_report}Line as Line,
          sum(AmountIn) as AmountIn,
          sum(AmountOut) as AmountOut
          FROM
          voucher as V,
          accountplan as A
          WHERE
          V.VoucherPeriod >= '$fromPeriod' AND V.VoucherPeriod <= '$toPeriod' AND
          A.AccountPlanID=V.AccountPlanID AND (A.AccountPlanID='$this->_LONN_ACCOUNT' OR A.AccountPlanID='$this->_FERIE_PENGER_ACCOUNT'
          OR A.AccountPlanID='$this->_BIL_GODTGJORELSE_ACCOUNT' )
        GROUP BY A.AccountPlanID
        ORDER BY Line asc
        ";
        
        //print($queryStr ."<br>");
        $rs = $this->_db->Query( $queryStr );
        $index=0;
		while($row= $this->_db->NextRow( $rs )){
			//$this->_accountList[$index]= array ('saldo'=>$row['AmountIn'], 'AccountPlanID'=>$row['AccountPlanID'],
			  //                     'AccountName'=>$row['AccountName']);
			 $this->_accountIDList[$index]= $row['AccountPlanID'];
			 $this->_accountNameList[$index]= $row['AccountName'];
			 $this->_saldoList[$index]= $row['AmountIn']-$row['AmountOut'];
			 
			 if ($row['AccountPlanID']==$this->_FERIE_PENGER_ACCOUNT) {
			 	$feirpengerIkkeInnberettet =$this->feriepenger($this->_fromPeriod, $this->_toPeriod);
	        		$feirpengerUtbetalt =$this->feriepenger($_lib['date']->get_this_period_last_year($this->_fromPeriod), $_lib['date']->get_this_period_last_year($this->_toPeriod));
			 	
			 	$this->_saldoList100_5[$index]=abs ($feirpengerUtbetalt);
			 	$this->_saldoList100_6[$index]=abs ($feirpengerIkkeInnberettet);
			 }else {
			 	$this->_saldoList100_5[$index]=0;
			 	$this->_saldoList100_6[$index]=0;
			 }
			 
			//print_r($this->_accountList[$index]);
			
			$index++;
		}//
		
		
       
    }//function result
    
     ############################################################################
    function feriepenger($fromPeriod, $toPeriod)
    {
        global $_sess, $_dbh, $_dsn, $_date;
        
        $queryStr = " SELECT
          A.AccountName,
          A.AccountPlanID,
          A.Report{$this->_report}Line as Line,
          sum(AmountIn) as AmountIn,
          sum(AmountOut) as AmountOut,
          V.VoucherPeriod
          FROM
          voucher as V,
          accountplan as A
          WHERE
          V.VoucherPeriod >= '$fromPeriod' AND V.VoucherPeriod <= '$toPeriod' AND
          A.AccountPlanID=V.AccountPlanID AND (A.AccountPlanID='$this->_TILLEGG_KOSTNADER_ACCOUNT') 
        GROUP BY A.AccountPlanID
        ORDER BY Line asc
        ";
        
        //print($queryStr ."<br>");
        $rs = $this->_db->Query( $queryStr );
		$row= $this->_db->NextRow( $rs );
		
		if ($row!=null)
			return $row['AmountIn']-$row['AmountOut'];
		return 0;
		
    }//function result
    


    function IsFoundedThisYear($FoundedDate)
    {
        global $_date, $_lib;
        $foundedYear = $_lib['date']->get_this_year($FoundedDate);
        if($foundedYear < $this->_thisYear)
        {
            return '';
        }
        else
        {
            return $FoundedDate;
        }
    }

    ##############################################################
    #funksjoner mot mapping object
    function addMapping($o, $h, $a)
    {
        $this->_altinnMapping->addMapping($o, $h, $a);
    }

    function setOrid($o, $v)
    {
        $this->_altinnMapping->setOrid($o, $v);
    }

    function setAccount($a, $v)
    {
        $retval = $this->_altinnMapping->setAccount($a, $v);
        return $retval;
    }
    
    function getAccount($a)
    {
        return $this->_altinnMapping->getAccount($a);
       
    }

    function setHuman($h, $v)
    {
        $this->_altinnMapping->setHuman($h, $v);
    }

    function getOridArray()
    {
        return $this->_altinnMapping->getOridArray();
    }
}
?>
