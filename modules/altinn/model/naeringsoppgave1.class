<?
// Start: Bugfiks av Geir Eliassen ( geir@lodo.no )
function dateFromPeriode($periode)
{
	list($y, $m) = split("-", $periode);
	return $periode . "-" . date("t", mktime(0, 0, 0, $m, 1, $y));
}
// Slutt: Bugfiks av Geir Eliassen ( geir@lodo.no )

class NaeringsOppgave1
{
    var $_report;
    var $_altinnMapping;
    var $_generalReport;
    var $_comanyInfo;

    var $_sumLine;
    var $_sumPart;
    var $_sumGroup;
    var $_sumTotal;
    var $_total;

    var $_fromPeriod;
    var $_toPeriod;
    var $_thisYear;
    var $_lastYear;
    var $_enableLastYear;

	
    ##############################################################
    #array('fromPeriod'=>'2004-01', 'toPeriod'=>'2004-12', 'enableLastYear'=>'1', 'report'=>'5')
    function NaeringsOppgave1($args)
    {
        global $_SETUP, $_date, $_lib;
        require_once $_SETUP['HOME_DIR']."/code/lodo/lib/altinnmapping.class";
        includelogic('report/general');
        includelogic('company/companyinfo');

        $this->_enableLastYear = $args['enableLastYear'] = 1;
        $this->_report = $args['report'] = 3;

        $this->_altinnMapping = new AltinnMapping($this->_report);
        
        $this->_comanyInfo = new ComanyInfo(array());
        $this->_generalReport = new GeneralReport(array($args));

        $this->_fromPeriod = $args['fromPeriod'];
        $this->_toPeriod = $args['toPeriod'];
        $this->_thisYear = $_lib['date']->get_this_year($args['fromPeriod']);
        $this->_lastYear = $this->_thisYear-1;

        //$this->_altinnMapping->NeringsOppgave1Mapping();
        $this->BuildCompanyInfo();
        list($this->_sumLine, $this->_sumPart, $this->_sumGroup, $this->_sumTotal, $this->_total) = $this->_generalReport->GetReport($args);
        $this->InsertMapping();
    }

    ##############################################################
    function BuildCompanyInfo()
    {
        // $lastDay = $_lib['date']->get_last_day_in_month($this->_toPeriod);
		// Start: Bugfiks av Geir Eliassen ( geir@lodo.no )
		$lastDay = dateFromPeriode($this->_toPeriod);
		// Slutt : Bugfiks av Geir Eliassen ( geir@lodo.no )
        
		$this->setAccount('FromPeriod', $this->_fromPeriod.'-01');
        $this->setAccount('ToPeriod', $lastDay);
        $this->setAccount('VName', $this->_comanyInfo->CustomerCompany->VName);
        $this->setAccount('VAddress', $this->_comanyInfo->CustomerCompany->VAddress);
        $this->setAccount('VZipCode', $this->_comanyInfo->CustomerCompany->VZipCode);
        $this->setAccount('VCity', $this->_comanyInfo->CustomerCompany->VCity);
        //$this->setAccount('OrgNumber', $this->_comanyInfo->CustomerCompany->OrgNumber);
        $this->setAccount('OrgNumber', str_replace(" ", "", $this->_comanyInfo->CustomerCompany->OrgNumber2));
        $this->setAccount('FoundedYear', $this->IsFoundedThisYear($ComanyInfo->CustomerCompany->FoundedDate));
        $this->setAccount('WorkAmount', $this->_comanyInfo->CalculateLabour($this->_fromPeriod, $this->_toPeriod));

        $this->setAccount('KontaktpersonVirksomhet', $this->_comanyInfo->CustomerPerson->FirstName . " " . $this->_comanyInfo->CustomerPerson->MiddleName . " " . $this->_comanyInfo->CustomerPerson->LastName);
        

        //$this->setAccount('FOrgNumber', $this->_comanyInfo->RegnskapCompany->OrgNumber);
       	$this->setAccount('ExternalID',  $this->_comanyInfo->RegnskapCompany->OrgNumber2);
        $this->setAccount('FOrgNumber', $this->_comanyInfo->RegnskapCompany->OrgNumber2);
        $this->setAccount('FVName', $this->_comanyInfo->RegnskapCompany->VName);
        $this->setAccount('FVAddress', $this->_comanyInfo->RegnskapCompany->VAddress);
        $this->setAccount('FVZipCode', $this->_comanyInfo->RegnskapCompany->VZipCode);
        $this->setAccount('FVCity', $this->_comanyInfo->RegnskapCompany->VCity);

        //$this->setAccount('ROrgNumber', $this->_comanyInfo->RevisorCompany->OrgNumber);
        $this->setAccount('ROrgNumber', str_replace(" ", "", $this->_comanyInfo->RevisorCompany->OrgNumber2));
        $this->setAccount('RVName', $this->_comanyInfo->RevisorCompany->VName);
        $this->setAccount('RVAddress', $this->_comanyInfo->RevisorCompany->VAddress);
        $this->setAccount('RVZipCode', $this->_comanyInfo->RevisorCompany->VZipCode);
        $this->setAccount('RVCity', $this->_comanyInfo->RevisorCompany->VCity);
        $this->setAccount('RName', $this->_comanyInfo->RevisorPerson->FirstName.' '.$ComanyInfo->RevisorPerson->LastName);

		$this->setAccount('EndretNaringAdr', 'Nei');
        $this->setAccount('ThisExternal', 'Ja');
        $this->setAccount('ExternalAccountant', 'Ja');
        $this->setAccount('NyetablertVirksomhet', 'Nei');
        
        $this->setAccount('D0402navn', $this->_comanyInfo->CustomerCompany->Category);
        $this->setAccount('D0402id', '1');
        $this->setAccount('D0402ja', 'Ja');
    }
    ##############################################################
    function InsertMapping()
    {
        foreach($this->_sumPart as $lineID => $yearHash)
        {
            if($lineID != 0)
            {
                foreach($yearHash as $year => $valueHash)
                {
                    $retval = 1;
                    if($year == $this->_thisYear)
                    {
                        //print "D$lineID - $year == $this->_thisYear - ".$valueHash['saldo']."<br>";
                        $retval = $this->setAccount("D$lineID", $valueHash['saldo']);
                        if ($lineID == "9930")
                        {
                        	// $this->setAccount('D0401', $valueHash['saldo']);
                        	$this->setAccount('D0402b', $valueHash['saldo']);
                        	$this->setAccount('D0402e', $valueHash['saldo']);
                        }
                        
                    }
                    elseif($year == $this->_lastYear)
                    {
                        //print "F$lineID - $year == $this->_lastYear - ".$valueHash['saldo']."<br>";
                        $retval = $this->setAccount("F$lineID", $valueHash['saldo']);
                    }
                    else
                    {
                        $retval = $this->setAccount('ERROR '.$lineID, $valueHash['saldo']);
                    }

                    if($retval == 0)
                    {
                        print "Sjekk konto ".$this->_generalReport->GetAccountByLine($lineID)." - linjenr $lineID i rapporten finnes ikke i altinn skjemaet<br />";
                    }
                }
            }
        }

        foreach($this->_sumGroup as $lineID => $yearHash)
        {
            if($lineID != 0)
            {
                foreach($yearHash as $year => $valueHash)
                {
                    if($year == $this->_thisYear)
                    {
                        //print "D$lineID - $year == $this->_thisYear - ".$valueHash['saldo']."<br>";
                        $retval = $this->setAccount("D$lineID", $valueHash['saldo']);
                    }
                    elseif($year == $this->_lastYear)
                    {
                        //print "F$lineID - $year == $this->_lastYear - ".$valueHash['saldo']."<br>";
                        $retval = $this->setAccount("F$lineID", $valueHash['saldo']);
                    }
                    else
                    {
                        $retval = $this->setAccount('ERROR'.$lineID, $valueHash['saldo']);
                    }

                    if($retval == 0)
                    {
                        print "Sjekk konto ".$this->_generalReport->GetAccountByLine($lineID)." - linjenr $lineID i rapporten finnes ikke i altinn skjemaet<br />";
                    }
                }
            }
        }
    }

    function IsFoundedThisYear($FoundedDate)
    {
        global $_date, $_lib;
        $foundedYear = $_lib['date']->get_this_year($FoundedDate);
        if($foundedYear < ($this->_thisYear - 4))
        {
            return '0';
        }
        else
        {
            return '1';
        }
    }

    ##############################################################
    #funksjoner mot mapping object
    function addMapping($o, $h, $a)
    {
        $this->_altinnMapping->addMapping($o, $h, $a);
    }

    function setOrid($o, $v)
    {
        $this->_altinnMapping->setOrid($o, $v);
    }

    function setAccount($a, $v)
    {
        $retval = $this->_altinnMapping->setAccount($a, $v);
        return $retval;
    }

    function setHuman($h, $v)
    {
        $this->_altinnMapping->setHuman($h, $v);
    }

    function getOridArray()
    {
        return $this->_altinnMapping->getOridArray();
    }
}
?>
