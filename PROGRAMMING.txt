Programming guides

LOG all trespassing og exit pŒ extranettet
 Developer Declaration of Independence
http://www.opengroup.org/declaration/declaration.htm

By: Thomas Ekdahl
Date: 2003-12-27
Version 0.2

##############################################

Configuration files:
/code/lib/setup/ - must be setup before anything works
All variables uppercase

##############################################
Code dispatch mechanism:

Text search should always use searchstring as fieldname for automatic logging of searchwords.

DISPATCH:
html/index.php

index.php is dispatch mechanisms. Gives authentication, role control, language handling, security and automatially inclusion of common require_once files, over all files automatically.
The dispatch will even know if you are trying to log in or not and use the correct configuratiions for each situation.

All funktions should be in upper-cam case (e.g. $ConvertToInt)
All variabels should be in lover-cam case (e.g. $numberToConvert)
All get functions like: get_numberToConvert, should also be in lover-cam case

All functions and variable names in framework/libraries should start with _ (like $_SETUP[])
All setup parameters should be upper case.

Do not use " around variables that dont need interpolation (slower) ie not: print "$_SETUP[]";

All require_once files shall end with .inc

All formatting of dates should be done with: $_format->date($date)
All formatting of amounts should be done with: $_format->amount($amount)
All formatting of percents should be done with: $_format->Percent($value) or reverse with: $_format->ReversePercent($text)

All code should be placed in:
code/interface/[module]/[file]

Send references instead of copying variables and hashes for speed.

#A method to get uniform insert values across modules and interfaces - for the same tables.


Links: all links (href) and action tag in forms should contain this code:
<? print $_lib['sess']->dispatch; ?>t=module.file (without php extension)

Examples:
<a href="<? print $_lib['sess']->dispatch; ?>t=licence.edit">test</a>
<form name="licence_list" action="<? print $_lib['sess']->dispatch ?>t=licence.edit" method="post">
<form name="licence_list" action="<? print $MY_SELF ?>t=licence.edit" method="post">

Reference to the current page:
$_MY_SELF

All buttons should be named: action_[tablename]_[update/new/delete/etc].No underscore _ allowed in the last command name.

All field names in forms should be on the form: tablename.fieldname

- If multi record/table update the fieldnames should be: tablename.fieldname.pk (pk has to be int = primarykey)

- If used from more than one db dbname.tablename.fieldname (not supported yet)

This will require_once the file /code/licence/edit.php correctly.

Warning: No php code should ever be placed in the public /html catalog.

WRITING NEW MODULES
All new modules should be placed in:
/code/[module]/[file]

Both module and file names should be lower case

Allways require_once common header info:
<? print $_lib['sess']->doctype ?>
<head>
    <title>Books</title>
    <meta name="cvs"                content="$Id: PROGRAMMING.txt,v 1.38 2005/10/28 17:59:36 thomasek Exp $" />
    <? require_once "../lib/html/head.inc"; ?>
</head>

- title spesific to file
- cvs info
- common headers

Database manipulation:
All tablenames should be lowercase for compatibility with all OS'es

All field names should b upper camel case
All keys and foreign keys shoul end on ID and start with table name if possibel
Underscore _ is forbidden in fieldnames - reserved character for advanced db functions

All select queries should use $_lib['db']->db_query2(); #With bindvalues db_query is deprecated
All insert queries should use db_insert_hash();
All update queries to one record should use $_lib['db']->update($_input->get_data()); #db_update_hash is deprecated. - includes input parameter verification, role check, and transformation of wrongly formatted data. All fields has to be tablename-filedname all buttons should start with action_
All multi table/record update queries should use $_lib['db']->update($_input->get_data()); #db_update_multi_table deprecated

##############################################
Actions - making new actions

Action dispatch mechanism, replaces need for included record.inc files (record.inc deprecated)

Pros:
It is possible to run multiple actions in a button click, eks update and new just by having them included in querystring or as hidden fields
Actions load dynamically
Actions is very loosely coupled to templates and can be used an all interfaces
Actions is more robust to syntax errors (only the action you destroy stops working)
Actions is more easyli extensible
Actions should first describe what they do
Actions should verify and convert all required input first with  $_sess->required #This also serves as documentation for new usrs
Actions should verify and convert all optional input second with  $_sess->required
Actions should then manipulate the data. If objects and classes are needed place the objects for reuse in /lib/logic/classname/ folders
Actions does usually not return anything except in iserts where they return the PK value inserted
Actions should only use non deprecated db functions like new_hash and update and delete.
Example:
name: action_person_update is placed in the file /code/lib/action/person/update.inc

#This action updates all data on the person object
$hidden = $_sess->required($_input->get_hidden(), array('PublishCategoryID' => 'int'));
$hidden = $_sess->optional($_input->get_hidden(), array('PublishCategoryParentID' => 'int'));

$_lib['db']->update($_input->get_data()); #actually the same as the action: action_general_update

##############################################
For easier debugging and logging

Session object:
Use the session object for all information about the current session. Never use queries or variables for accessing session info directly.

The session object is always instantiated automatically in index.php:
$_sess = new Session($DB_NAME, $login_id);

Methods used to get session information:

Hent UserID:
$_sess->login_id

$_sess->get_person($field);  #Field is fieldname from Person table


$_sess->get_company($field); #Field is fieldname from Company table


$_sess->get_session($field); #Session is valif session variables: (SID, DATE, SESSION_TIMEOUT, SECURITY_IP_CHECK, LOGIN_IP)


$_sess->get_setup($field);   #Setup is variable name from Setup table


$_sess->get_glob($field);    #Glob is variable name from setup file (COMPANY_ID, HOME_DIR, DOWNLOAD_DIR, XML_VERSION, CSS, DISPATCH, DEBUG, TEMPLATE_DIR, FILE_MAX_HEIGHT, FILE_MAX_WIDTH, SERVER_ADMIN, font_width, form_heading_vert, form_ingress_vert, form_description_vert, form_width, form_width, frames)

$_sess->get_args($field);    #args is all arguments passed from web (secured from malicious input) - Not yet implemented.

$_sess->get_dbh($field);    #args is all arguments passed from web (secured from malicious input) - Not yet implemented.

Debugging (Not implemented yet):
Never debug by using print or echo directly in a page. Always use one of the supplied functions:
When you use these functions all debug messages will appear automatically at the bottom of the page when debug is enabled and everything remover (of security reasons) when debug is disabled.

$_sess->debug($text, debug_backtrace());
$_sess->warning($text, debug_backtrace());
$_sess->error($text, debug_backtrace());


Functions and methods:
Should always use named parameters (send the reference to a hash) with $_sess as first argument, and the next called $args:

Example anonymous hash parameter sending:
<? $_form2->CompanyContactMenu( array('table' => 'weeklysaleday', 'field' => 'PersonID', 'value' => $sale->PersonID, 'pk' => $sale->WeeklySaleDayID)); ?>

Example hash sending:
<? 
$args = array();
$args['table']  = 'salary';
$args['field']  = 'AccountPlanID';
$args['value']  = $head->AccountPlanID;
$args['tabindex']   = '';
$args['accesskey']  = 'K';
$args['pk']     = $head->SalaryID;
$args['type'][] = 'employee';
$_lib['form3']->accountplan_number_menu($args); 
?>


ALl Location headers should contain: redirected=1 to catch inifinite location loops

All forms should be generated with autoforms if possible (all parameters can be overstyrt with commands in hash parameters to all methods):
$query = "select * from $db_table where PersonID='$PersonID'";
$form = &new autoform(array('query' => $query, 'table' => 'person', '_dbh' => $_dbh, '_dsn' => $_dsn, '_maxwidth' => 30));

<? print $form->start(array('name' => $form_name, 'action' => $MY_SELF, 'method' => 'post')); ?>

<? print $form->error(array('field' => 'HoursPrDay')); ?> /* Show error for this field
<? print $form->alias(array('field' => 'HoursPrDay')); ?> /* Show name for this field (Later with language control - automatically) 
<? print $form->show(array('field' => 'HoursPrDay')); ?> /* Show form for this field (later with full role controull automatically)

<? print $form->URL(array('url' => "$_SETUP[DISPATCH]t=person.editpassword&PersonID=$PersonID&CompanyID=$CompanyID", 'description' => 'Endre passord')) ?>

<? print $form->submit(array('name' => 'action_person_delete', 'accesskey' => 'D', 'value' => 'Deaktiver')); ?>
<? print $form->submit(array('name' => 'action_person_update', 'accesskey' => 'S', 'value' => 'Lagre')); ?>

<? print $form->stop(array()); ?>

Look at /code/intranett/person/edit.php for an example of the perfect form

DESIGN:
No font or style information shall be included in files. Everything must be completely controlled by css. css and language file can be spesified on person.

Note: Do not use any but local includes to the new module module. All other modules (found in /lib) are included automatically by dispatch system.


Input validation on required fileds to all functions should be done with:
$_sess->required($args, array('Field1' => 'int', 'Field2' => 'float'));

To ensure the correct format of the input and that the input exists. Should only be done on required fields.

##############################################
Security:
Never trust input variabls from web
All files are controlled by roles to person.
Not possible to view inc files
Possible to turn on ip check against cookis (not recommended for dial up customers)

##############################################
Please check all changes back into cvs.
Please send all sql content changes separately (will be overwritten by original db content when new installation is generated)



All variables, functions, classes, methods, databases, fields and cvs comments should be in english.

All comments shoudl be in phpdoc:
http://www.phpdoc.org/docs/HTMLSmartyConverter/default/phpDocumentor/tutorial_phpDocumentor.howto.pkg.html#basics.starting
http://alltasks.net/code/php_coding_standard.html

For saving of all forms information that do not need any special treatment (besides convert and format, use):
action_general_update (Saves multi record multi table automatically)


Finne antall kodelinjer:
wc -l `find . -name \*.php -o -name \*.inc`

Presentation
All advanced presentations should be finished and calculkated in an object/hash before presenting. Always. Easier reuse. Easier debug.

Structure

lib/framework - framework spesific things like forms, validation, converting, etc
lib/action - action (everything that should happen after button/link press)
lib/logic . classes to handle all common logic
lib/presentation - presentational layer
lib/setup


Charset problems in integrations (XMLSIMPLE)

Solved with: = htmlentities($this->VName, ENT_QUOTES, 'UTF-8'); #Even if data is ISO-8859-1 in XML receipt)

MySQL Presicion data types to be used all over except sceientific calculation
DECIMAL(16,2) default 0;

Correct title in all templates
<? print $_sess->title ?>

##############################################
3d party module conventions

Table naming: $Module\_name

Sql-changes       : mysql/$Module/sql-changes.mysql
Create statements : mysql/$Module/sql-create.mysql
Content           : mysql/$Module/sql-content.mysql
Last revision     : mysql/$Module/last.rev (latest line from sql-changes processes

Split cvs repository (pr $Module)

ToDO: 
Script som automatisk oppretter records i tabellen roletemplate og roletemplateaccess for Œ starte modulen.
Legge inn meny i menu tabellen.
